{"version":3,"file":"src_app_redirects_redirects_module_ts.js","mappings":"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","sources":["./src/app/pipes/remove-hash.pipe.ts","./src/app/redirects/redirects.component.ts","./src/app/redirects/redirects.module.ts","./src/app/redirects/redirects.routes.ts","./src/app/redirects/redirects.service.ts","./src/app/services/is-loading.service.ts","./src/app/redirects/redirects.component.css"],"sourcesContent":["import {PipeTransform, Pipe} from \"@angular/core\";\n@Pipe({name: 'replaceHash'})\n\n\nexport class ReplaceHashPipe implements PipeTransform {\n\n    transform(value) {\n        if (!value || !value.length) {\n            return;\n        }\n        return value.replace('#', '');\n\n    }\n}","import {Component, OnInit} from '@angular/core';\nimport {FormBuilder, FormArray, FormGroup, Validators, FormControl} from \"@angular/forms\";\nimport {DataService} from \"../services/data.service\";\nimport {CustomValidatorsService} from \"../services/custom-validators.service\";\nimport {IsLoadingService} from \"../services/is-loading.service\";\nimport {RedirectsService} from \"./redirects.service\";\nimport {CopyDataToClipboardService} from \"../services/copy-to-clipboard.service\";\nimport {SiteContextProviderService} from \"../../dev-tools/site-context-provider/services/site-context-provider.service\";\n\n// define jQuery\ndeclare var $: any;\n\n@Component({\n    selector: 'dev-redirects',\n    templateUrl: './redirects.component.html',\n    styleUrls: ['./redirects.component.css']\n})\n\nexport class RedirectsComponent implements OnInit {\n    private redirectsForm: FormGroup;\n    private prevUrlForm: FormGroup;\n    private redirectDomainForm: FormGroup;\n    private currentUrls: any[] = [];\n    private isLoading: boolean = false;\n    private account: string;\n    private redirectDataStatus: boolean;\n    private redirectDataMessage: string;\n    private contentAvailable: boolean = true;\n    public locUrl: any;\n    private default: boolean = true;\n\n    /**\n     *\n     * @param _copyDataToClipboardService\n     * @param _siteContextProviderService\n     * @param _redirectsService\n     * @param _dataService\n     * @param _fb\n     * @param _customValidatorsService\n     * @param _isLoadingService\n     * @param prev_fb\n     */\n    constructor(private _copyDataToClipboardService: CopyDataToClipboardService,\n                private _siteContextProviderService: SiteContextProviderService,\n                private _redirectsService: RedirectsService,\n                private _dataService: DataService,\n                private _fb: FormBuilder,\n                private _customValidatorsService: CustomValidatorsService,\n                private _isLoadingService: IsLoadingService,\n                private prev_fb: FormBuilder) {\n\n        this.redirectsForm = new FormGroup({items: new FormArray([])});\n        this.prevUrlForm = new FormGroup({prevItems: new FormControl()});\n        this.locUrl = 'http://garykingweb.com'; //this._siteContextProviderService.getCurrentDomainName()\n        this.redirectDomainForm = new FormGroup({\n            previousdomainname: new FormControl('', Validators.compose([Validators.required, _customValidatorsService.protocolValidator]))\n        })\n    }\n\n    ngOnInit() {\n        this.isLoading = false;\n        this.default = true;\n        this.contentAvailable = true;\n    }\n\n    /**\n     * Get main-nav html\n     * @param mainNav\n     */\n    parseUrls(mainNav): any[] {\n        var sitemap: any[] = [];\n\n        $('li a', mainNav).each(function () {\n            sitemap.push($(this).attr('href'));\n        });\n\n        var uniqueNavItems = [];\n        $.each(sitemap, function (i, el) {\n            if ($.inArray(el, uniqueNavItems) === -1) uniqueNavItems.push(el);\n        });\n\n        sitemap = uniqueNavItems;\n        return sitemap;\n    };\n\n    /**\n     *\n     * @param domainname\n     */\n    onGetPreviousDomainUrls(domainname: any): void {\n\n        this.isLoading = true;\n        this.default = true;\n\n        this._siteContextProviderService.getCurrentContext().subscribe(\n            data => {\n                this.onGetUrlData(data.account, domainname);\n            },\n            error => console.log(error)\n        );\n    }\n\n    /**\n     *\n     * @param account\n     * @param domainname\n     */\n    onGetUrlData(account: string, domainname) {\n\n        /**\n         * Get previous site urls\n         */\n        this._redirectsService.getPreviousSiteUrls(domainname)\n            .subscribe(\n                previousUrls => {\n\n                    /*this._dataService.getHubNavData(account)\n                        .subscribe(\n                            navHtml => {\n\n                                this.currentUrls = this.parseUrls(navHtml);\n\n                                // Create FormGroup array\n                                this.prevUrlForm = this.prev_fb.group({\n                                    prevItems: this.prev_fb.array([])\n                                });\n\n                                var prevUrlForm = this.prevUrlForm;\n                                var component = this;\n\n                                // Create an array for the form\n                                previousUrls.forEach(function (previtem) {\n\n                                    var control = <FormArray>prevUrlForm.controls['prevItems'];\n\n                                    control.push(component.prev_fb.group({\n                                        url: [previtem],\n                                        redirectto: [''],\n                                    }));\n                                });\n\n                                var contentAvailability = this._isLoadingService.isLoadingContent(previousUrls);\n                                if (contentAvailability) {\n                                    this.contentAvailable = false;\n                                    this.isLoading = false;\n                                    this.redirectDataMessage = 'Complete';\n                                    this.default = false;\n                                } else {\n                                    this.contentAvailable = true;\n                                    this.isLoading = false;\n                                    this.redirectDataMessage = 'No Data Available';\n                                    this.default = false;\n                                }\n\n                            }\n                        ),\n                        error => {\n                            console.log(error);\n                            this.isLoading = false;\n                            this.redirectDataMessage = 'No data available! Check if is correct domain or site is live';\n                        };*/\n                });\n\n      /*  this._dataService.getHubNavData(account)\n            .subscribe(\n                data => {\n                    // Site links pre unique filter\n                    var urls: any[] = this.parseUrls(data);\n\n                    this.redirectDataStatus = true;\n                    //this.redirectDataMessage = 'Enter a domain name (if site is live) or account name.';\n\n                    // Create FormGroup array\n                    this.redirectsForm = this._fb.group({\n                        items: this._fb.array([])\n                    });\n\n                    var redirectsForm = this.redirectsForm;\n                    var component = this;\n\n                    urls.forEach(function (item) {\n                        var control = <FormArray>redirectsForm.controls['items'];\n                        control.push(component._fb.group({\n                            redirectto: [item, Validators.required]\n                        }));\n                    });\n\n                    this.isLoading = false;\n                },\n                error => {\n                    console.log(error);\n                    this.isLoading = false;\n                    this.redirectDataStatus = false;\n                    this.redirectDataMessage = 'No data available! Correct domain (if site is live) or account name?';\n                }\n            );*/\n    }\n\n    /**\n     *\n     * @param form\n     */\n    onSetRedirectData(form) {\n        this._siteContextProviderService.getCurrentContext().subscribe(\n            data => {\n\n                var redirects = {\n                    account: data.account,\n                    redirectsData: []\n                };\n\n                redirects.redirectsData = form.prevItems.map(function (currentValue) {\n                    return {\n                        url: currentValue.url,\n                        redirectto: currentValue.redirectto\n                    };\n                });\n\n                /**\n                 *\n                 * @type {any[]}\n                 */\n                redirects.redirectsData = redirects.redirectsData.filter(function (redirect) {\n                    return redirect.redirectto !== null && redirect.redirectto !== '';\n                });\n\n                this._redirectsService.setRedirectData(redirects).subscribe();\n            },\n            error => console.log(error)\n        );\n\n    }\n\n    /**\n     * Copy to clipboard functions\n     * Utilities Module\n     */\n    onCopyHTMLToClipboard() {\n        this._copyDataToClipboardService.copyHTMLDataToClipboard();\n    }\n\n    onCopyCSSToClipboard() {\n        this._copyDataToClipboardService.copyCSSDataToClipboard();\n    }\n}\n","import {NgModule, CUSTOM_ELEMENTS_SCHEMA} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {RouterModule} from \"@angular/router\";\nimport {SharedDataModule} from \"../shared/shared-data/shared-data.module\";\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\nimport {SharedFormattingModule} from \"../shared/shared-formatting/shared-formatting.module\";\nimport {RedirectsComponent} from \"./redirects.component\";\nimport {RedirectsService} from \"./redirects.service\";\nimport {DataService} from \"../services/data.service\";\nimport {ROUTES} from \"./redirects.routes\";\nimport {UtilitiesModule} from \"../utilities/utilities.module\";\nimport {IsLoadingService} from \"../services/is-loading.service\";\nimport {MenuModule} from \"../menu/menu.module\";\nimport {ReplaceHashPipe} from \"../pipes/remove-hash.pipe\";\n\n@NgModule({\n    providers: [\n        RedirectsService,\n        DataService,\n        IsLoadingService,\n\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        MenuModule,\n        ReactiveFormsModule,\n        SharedDataModule,\n        SharedFormattingModule,\n        UtilitiesModule,\n        RouterModule.forChild(ROUTES),\n    ],\n    declarations: [RedirectsComponent, ReplaceHashPipe],\n    exports: [RedirectsComponent],\n    schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class RedirectsModule {}","import {Routes} from \"@angular/router\";\nimport {RedirectsComponent} from \"./redirects.component\";\n\nexport const ROUTES: Routes = [\n    { path: '', component: RedirectsComponent }\n];","import {Injectable} from '@angular/core';\nimport {Observable, Subscriber} from \"rxjs\";\nimport {HttpClient, HttpHeaders} from \"@angular/common/http\";\n\n@Injectable()\nexport class RedirectsService {\n    constructor(private _http: HttpClient) {\n    }\n\n    getPreviousSiteUrls(previousdomainname: string): Observable<any> {\n        const body = JSON.stringify(previousdomainname);\n        const headers = new HttpHeaders();\n        headers.append('Content-Type', 'application/json');\n        return this._http.post('/dashboard/endpoints/redirects/301-redirects.php?v=' + new Date(), body, {headers: headers});\n    }\n\n    setRedirectData(redirects) {\n        const body = JSON.stringify(redirects);\n        const headers = new HttpHeaders();\n        headers.append('Content-Type', 'application/json');\n        return this._http.post('/dashboard/endpoints/redirects/301-redirects-set-data.endpoint.php', body, {headers: headers});\n\n    }\n\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class IsLoadingService {\n\n  // Clear loading icon after process is complete\n  public isLoading: boolean = false\n  constructor() { }\n\n  isLoadingContent(contentToLoad){\n    if(contentToLoad != '' || contentToLoad === null) {\n      return this.isLoading = true;\n    }\n    else {\n      return this.isLoading = false;\n    }\n  }\n\n}\n","// Imports\nvar ___CSS_LOADER_API_SOURCEMAP_IMPORT___ = require(\"../../../node_modules/css-loader/dist/runtime/sourceMaps.js\");\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../../node_modules/css-loader/dist/runtime/api.js\");\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"\", \"\",{\"version\":3,\"sources\":[],\"names\":[],\"mappings\":\"\",\"sourceRoot\":\"\"}]);\n// Exports\nmodule.exports = ___CSS_LOADER_EXPORT___.toString();\n"],"names":["Pipe","ReplaceHashPipe","transform","value","length","replace","name","Component","FormBuilder","FormArray","FormGroup","Validators","FormControl","DataService","CustomValidatorsService","IsLoadingService","RedirectsService","CopyDataToClipboardService","SiteContextProviderService","RedirectsComponent","constructor","_copyDataToClipboardService","_siteContextProviderService","_redirectsService","_dataService","_fb","_customValidatorsService","_isLoadingService","prev_fb","redirectsForm","items","prevUrlForm","prevItems","locUrl","redirectDomainForm","previousdomainname","compose","required","protocolValidator","ngOnInit","isLoading","default","contentAvailable","parseUrls","mainNav","sitemap","$","each","push","attr","uniqueNavItems","i","el","inArray","onGetPreviousDomainUrls","domainname","getCurrentContext","subscribe","data","onGetUrlData","account","error","console","log","getPreviousSiteUrls","previousUrls","onSetRedirectData","form","redirects","redirectsData","map","currentValue","url","redirectto","filter","redirect","setRedirectData","onCopyHTMLToClipboard","copyHTMLDataToClipboard","onCopyCSSToClipboard","copyCSSDataToClipboard","selector","template","NgModule","CUSTOM_ELEMENTS_SCHEMA","CommonModule","RouterModule","SharedDataModule","FormsModule","ReactiveFormsModule","SharedFormattingModule","ROUTES","UtilitiesModule","MenuModule","RedirectsModule","providers","imports","forChild","declarations","exports","schemas","path","component","Injectable","HttpClient","HttpHeaders","_http","body","JSON","stringify","headers","append","post","Date","isLoadingContent","contentToLoad"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}